{"version":3,"sources":["components/Routes/Root/components/UsernameInput/index.js","components/Routes/Root/components/PostScreen/GetPosts/index.js","components/Routes/Root/components/PostScreen/Post/DeletePost/index.js","components/Routes/Root/components/PostScreen/Post/EditPost/index.js","components/Routes/Root/components/PostScreen/Post/ReplyToPost/index.js","components/Routes/Root/components/PostScreen/Post/GetComments/index.js","components/Routes/Root/components/PostScreen/Post/CommentView/GetNestedComments/index.js","components/Routes/Root/components/PostScreen/Post/CommentView/ReplyToNestedComment/index.js","components/Routes/Root/components/PostScreen/Post/CommentView/DeleteNestedComments/index.js","components/Routes/Root/components/PostScreen/Post/CommentView/EditNestedComments/index.js","components/Routes/Root/components/PostScreen/Post/CommentView/index.js","components/Routes/Root/components/PostScreen/Post/index.js","components/Routes/Root/components/PostScreen/PostMessage/index.js","components/Routes/Root/components/PostScreen/index.js","components/Routes/Root/index.js","components/App.js","serviceWorker.js","index.js"],"names":["UsernameInput","props","id","type","placeholder","onClick","e","preventDefault","username","document","querySelector","value","set_username","GetPosts","set_posts","Promise","resolve","reject","a","window","fetch","process","method","headers","body","response","json","user_posts","status","client_post_data","data","forEach","current_post","post_id","DeletePost","post_deleted","console","log","alert","EditPost","new_post_message","post_edited","message","ReplyToPost","replied","GetComments","set_comments","post_comments","new_comment_list","current_comment","GetNestedComments","ReplyToNestedComment","DeleteNestedComments","nested_comments","new_deleted_comment_list","JSON","parse","stringify","EditNestedComments","new_edited_comments","post","post_message","Comment","useState","set_nested_comments","reply_to_comment","replied_message","prompt","comment_data","delete_comment","previous_comment","previous_set_comment","edit_nested_comments","edited_nested_message","show_nested_comments","className","moment","datetime","calendar","sameElse","Object","keys","length","map","key","Post","comments","delete_post","post_data","edit_post","edited_message","reply_to_post","reply_message","show_comments","CommentView","PostMessage","save_post","PostScreen","posts","useEffect","reverse","Root","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.68c731c3.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\r\n\r\nimport './css/index.css';\r\n\r\nconst UsernameInput = (props) => {\r\n\r\n    const login = (e) => {\r\n\r\n        e.preventDefault();\r\n\r\n        var username = document.querySelector(\"#username\").value;\r\n\r\n        if (username) {\r\n\r\n            props.set_username(username);\r\n\r\n        }\r\n\r\n    };\r\n\r\n    return (\r\n\r\n        <Fragment>\r\n\r\n            <form id=\"username_input_section\">\r\n\r\n                <input type=\"text\" id=\"username\" placeholder=\"enter your username\" />\r\n\r\n                <button type=\"submit\" id=\"login\" onClick={login}>Login</button>\r\n\r\n            </form>\r\n\r\n        </Fragment>\r\n\r\n    );\r\n\r\n\r\n};\r\n\r\nexport default UsernameInput;","const GetPosts = (username, set_posts) => {\r\n\r\n    return new Promise(async (resolve, reject) => {\r\n\r\n        try {\r\n\r\n\r\n            if (window.fetch) {\r\n\r\n                var response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/get_posts`, {\r\n\r\n                    method: \"POST\",\r\n                    headers: {\r\n\r\n                        'Content-Type': 'application/x-www-form-urlencoded',\r\n\r\n                    },\r\n                    body: `username=${username}`\r\n\r\n                });\r\n\r\n                var user_posts = await response.json();\r\n\r\n                if (user_posts && user_posts.status === 'success') {\r\n\r\n                    var client_post_data = {};\r\n\r\n                    user_posts.data.forEach(current_post => {\r\n\r\n                        client_post_data[current_post.post_id] = current_post;\r\n\r\n                    });\r\n\r\n                    set_posts(client_post_data);\r\n\r\n                    resolve(client_post_data);\r\n\r\n\r\n                } else {\r\n\r\n                    set_posts({});\r\n                    resolve(false);\r\n\r\n\r\n                }\r\n\r\n\r\n            }\r\n\r\n\r\n        } catch (e) {\r\n\r\n            reject(e);\r\n\r\n\r\n        }\r\n\r\n\r\n    });\r\n\r\n\r\n};\r\n\r\nexport default GetPosts;","import GetPosts from '../../GetPosts/index.js';\r\n\r\nconst DeletePost = (username, post_id, set_posts) => {\r\n\r\n    return new Promise(async (resolve, reject) => {\r\n\r\n\r\n        try {\r\n\r\n\r\n            if (window.fetch) {\r\n\r\n                var response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/delete_post`, {\r\n\r\n                    method: \"POST\",\r\n                    headers: {\r\n\r\n                        'Content-Type': 'application/x-www-form-urlencoded',\r\n\r\n                    },\r\n                    body: `username=${username}&&post_id=${post_id}`\r\n\r\n                });\r\n\r\n\r\n                var post_deleted = await response.json();\r\n\r\n                if (post_deleted.status === 'success') {\r\n\r\n                    await GetPosts(username, set_posts);\r\n\r\n                    resolve();\r\n\r\n\r\n                } else {\r\n\r\n\r\n                    console.log(post_deleted);\r\n\r\n                    alert(post_deleted);\r\n\r\n                    resolve();\r\n\r\n                }\r\n\r\n\r\n            }\r\n\r\n\r\n        } catch (e) {\r\n\r\n            reject(e);\r\n\r\n\r\n        }\r\n\r\n\r\n    });\r\n\r\n\r\n};\r\n\r\nexport default DeletePost;","import GetPosts from '../../GetPosts/index.js';\r\n\r\nconst EditPost = (username, post_id, new_post_message,set_posts) => {\r\n\r\n    return new Promise(async (resolve, reject) => {\r\n\r\n        try {\r\n\r\n\r\n            if (window.fetch) {\r\n\r\n                var response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/edit_post`, {\r\n\r\n                    method: \"POST\",\r\n                    headers: {\r\n\r\n                        'Content-Type': 'application/x-www-form-urlencoded',\r\n\r\n                    },\r\n                    body: `username=${username}&&post_id=${post_id}&&post_message=${new_post_message}`\r\n\r\n                });\r\n\r\n\r\n                var post_edited = await response.json();\r\n\r\n                if (post_edited.status === 'success') {\r\n\r\n                    await GetPosts(username, set_posts);\r\n\r\n                    resolve();\r\n\r\n                } else {\r\n\r\n                    alert(post_edited.message);\r\n\r\n                    resolve();\r\n\r\n                }\r\n\r\n\r\n            }\r\n\r\n\r\n        } catch (e) {\r\n\r\n            reject(e);\r\n\r\n\r\n        }\r\n\r\n\r\n    });\r\n\r\n\r\n};\r\n\r\nexport default EditPost;","import GetPosts from '../../GetPosts/index.js';\r\n\r\nconst ReplyToPost = (username, post_id, new_post_message, set_posts) => {\r\n\r\n    return new Promise(async (resolve, reject) => {\r\n\r\n        try {\r\n\r\n\r\n            if (window.fetch) {\r\n\r\n                var response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/reply_to_post`, {\r\n\r\n                    method: \"POST\",\r\n                    headers: {\r\n\r\n                        'Content-Type': 'application/x-www-form-urlencoded',\r\n\r\n                    },\r\n                    body: `username=${username}&&post_id=${post_id}&&post_message=${new_post_message}`\r\n\r\n                });\r\n\r\n\r\n                var replied = await response.json();\r\n\r\n                if (replied.status === 'success') {\r\n\r\n                    await GetPosts(username, set_posts);\r\n\r\n                    resolve();\r\n\r\n                } else {\r\n\r\n                    alert(replied.message);\r\n\r\n                    resolve();\r\n\r\n                }\r\n\r\n\r\n            }\r\n\r\n\r\n        } catch (e) {\r\n\r\n            reject(e);\r\n\r\n\r\n        }\r\n\r\n\r\n    });\r\n\r\n\r\n};\r\n\r\nexport default ReplyToPost;","const GetComments = (username, post_id, set_comments) => {\r\n\r\n    return new Promise(async (resolve, reject) => {\r\n\r\n        try {\r\n\r\n\r\n            if (window.fetch) {\r\n\r\n                var response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/get_comments`, {\r\n\r\n                    method: \"POST\",\r\n                    headers: {\r\n\r\n                        'Content-Type': 'application/x-www-form-urlencoded',\r\n\r\n                    },\r\n                    body: `username=${username}&&post_id=${post_id}`\r\n\r\n                });\r\n\r\n\r\n                var post_comments = await response.json();\r\n\r\n                if (post_comments.status === 'success') {\r\n\r\n                    var new_comment_list = {};\r\n\r\n                    post_comments.data.forEach(current_comment => {\r\n\r\n                        new_comment_list[current_comment.post_id] = current_comment;\r\n\r\n                    });\r\n\r\n                    set_comments(new_comment_list);\r\n\r\n                    resolve();\r\n\r\n                } else {\r\n\r\n                    set_comments({});\r\n\r\n                    alert(post_comments.message);\r\n\r\n                    resolve();\r\n\r\n                }\r\n\r\n\r\n            }\r\n\r\n\r\n        } catch (e) {\r\n\r\n            reject(e);\r\n\r\n\r\n        }\r\n\r\n\r\n    });\r\n\r\n\r\n};\r\n\r\nexport default GetComments;","const GetNestedComments = (username, post_id, set_comments) => {\r\n\r\n    return new Promise(async (resolve, reject) => {\r\n\r\n        try {\r\n\r\n\r\n            if (window.fetch) {\r\n\r\n                var response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/get_comments`, {\r\n\r\n                    method: \"POST\",\r\n                    headers: {\r\n\r\n                        'Content-Type': 'application/x-www-form-urlencoded',\r\n\r\n                    },\r\n                    body: `username=${username}&&post_id=${post_id}`\r\n\r\n                });\r\n\r\n\r\n                var post_comments = await response.json();\r\n\r\n                if (post_comments.status === 'success') {\r\n\r\n\r\n                    var new_comment_list = {};\r\n\r\n                    post_comments.data.forEach(current_comment => {\r\n\r\n                        new_comment_list[current_comment.post_id] = current_comment;\r\n\r\n                    });\r\n\r\n\r\n                    console.log('comments got are');\r\n\r\n                    console.log(new_comment_list);\r\n\r\n                    set_comments(new_comment_list);\r\n\r\n                    resolve();\r\n\r\n                } else {\r\n                    \r\n                    //set_comments({});\r\n\r\n                    alert(post_comments.message);\r\n\r\n                    resolve();\r\n\r\n                }\r\n\r\n\r\n            }\r\n\r\n\r\n        } catch (e) {\r\n\r\n            reject(e);\r\n\r\n\r\n        }\r\n\r\n\r\n    });\r\n\r\n\r\n};\r\n\r\nexport default GetNestedComments;","import GetNestedComments from '../GetNestedComments';\r\n\r\nconst ReplyToNestedComment = (username, post_id, new_post_message, set_comments) => {\r\n\r\n    return new Promise(async (resolve, reject) => {\r\n\r\n        try {\r\n\r\n\r\n            if (window.fetch) {\r\n\r\n                var response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/reply_to_post`, {\r\n\r\n                    method: \"POST\",\r\n                    headers: {\r\n\r\n                        'Content-Type': 'application/x-www-form-urlencoded',\r\n\r\n                    },\r\n                    body: `username=${username}&&post_id=${post_id}&&post_message=${new_post_message}`\r\n\r\n                });\r\n\r\n\r\n                var replied = await response.json();\r\n\r\n                if (replied.status === 'success') {\r\n\r\n                    await GetNestedComments(username, post_id,set_comments);\r\n\r\n                    resolve();\r\n\r\n                } else {\r\n\r\n                    alert(replied.message);\r\n\r\n                    resolve();\r\n\r\n                }\r\n\r\n\r\n            }\r\n\r\n\r\n        } catch (e) {\r\n\r\n            reject(e);\r\n\r\n\r\n        }\r\n\r\n\r\n    });\r\n\r\n\r\n};\r\n\r\nexport default ReplyToNestedComment;","import GetNestedComments from '../GetNestedComments';\r\n\r\nconst DeleteNestedComments = (username, post_id, nested_comments, set_comments) => {\r\n\r\n    return new Promise(async (resolve, reject) => {\r\n\r\n\r\n        try {\r\n\r\n\r\n            if (window.fetch) {\r\n\r\n                var response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/delete_post`, {\r\n\r\n                    method: \"POST\",\r\n                    headers: {\r\n\r\n                        'Content-Type': 'application/x-www-form-urlencoded',\r\n\r\n                    },\r\n                    body: `username=${username}&&post_id=${post_id}`\r\n\r\n                });\r\n\r\n\r\n                var post_deleted = await response.json();\r\n\r\n                if (post_deleted.status === 'success') {\r\n\r\n                    var new_deleted_comment_list = JSON.parse(JSON.stringify(nested_comments));\r\n\r\n                    delete new_deleted_comment_list[post_id];\r\n\r\n                    set_comments(new_deleted_comment_list);\r\n\r\n                    resolve();\r\n\r\n\r\n                } else {\r\n\r\n                    set_comments(nested_comments);\r\n\r\n                    console.log(post_deleted);\r\n\r\n                    alert(post_deleted);\r\n\r\n                    resolve();\r\n\r\n                }\r\n\r\n\r\n            }\r\n\r\n\r\n        } catch (e) {\r\n\r\n            reject(e);\r\n\r\n\r\n        }\r\n\r\n\r\n    });\r\n\r\n\r\n};\r\n\r\nexport default DeleteNestedComments;","import GetNestedComments from '../GetNestedComments';\r\n\r\nconst EditNestedComments = (username, post_id, new_post_message, nested_comments, set_comments) => {\r\n\r\n    return new Promise(async (resolve, reject) => {\r\n\r\n        try {\r\n\r\n\r\n            if (window.fetch) {\r\n\r\n                var response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/edit_post`, {\r\n\r\n                    method: \"POST\",\r\n                    headers: {\r\n\r\n                        'Content-Type': 'application/x-www-form-urlencoded',\r\n\r\n                    },\r\n                    body: `username=${username}&&post_id=${post_id}&&post_message=${new_post_message}`\r\n\r\n                });\r\n\r\n\r\n                var post_edited = await response.json();\r\n\r\n                if (post_edited.status === 'success') {\r\n\r\n                    var new_edited_comments = JSON.parse(JSON.stringify(nested_comments));\r\n\r\n                    new_edited_comments[post_id].post.post_message = new_post_message;\r\n\r\n                    set_comments(new_edited_comments);\r\n\r\n                    resolve();\r\n\r\n                } else {\r\n\r\n                    alert(post_edited.message);\r\n\r\n                    resolve();\r\n\r\n                }\r\n\r\n\r\n            }\r\n\r\n\r\n        } catch (e) {\r\n\r\n            reject(e);\r\n\r\n\r\n        }\r\n\r\n\r\n    });\r\n\r\n\r\n};\r\n\r\nexport default EditNestedComments;","import React, { Fragment, useEffect, useState } from 'react';\r\n\r\nimport ReplyToNestedComment from './ReplyToNestedComment';\r\n\r\nimport GetNestedComments from './GetNestedComments';\r\n\r\nimport DeleteNestedComments from './DeleteNestedComments';\r\n\r\nimport EditNestedComments from './EditNestedComments';\r\n\r\nimport moment from 'moment';\r\n\r\nimport './css/index.css';\r\n\r\nconst Comment = (props) => {\r\n\r\n    var [nested_comments, set_nested_comments] = useState({});\r\n\r\n\r\n    const reply_to_comment = async () => {\r\n\r\n        var replied_message = window.prompt('enter a reply message');\r\n\r\n        if (replied_message) {\r\n\r\n            await ReplyToNestedComment(props.username, props.comment_data.post_id, replied_message, set_nested_comments);\r\n\r\n        }\r\n\r\n    };\r\n\r\n    const delete_comment = async () => {\r\n\r\n        await DeleteNestedComments(props.username, props.comment_data.post_id, props.previous_comment, props.previous_set_comment);\r\n\r\n    };\r\n\r\n\r\n    const edit_nested_comments = async () => {\r\n\r\n        var edited_nested_message = window.prompt('enter a new message');\r\n\r\n        if (edited_nested_message && props.previous_comment) {\r\n\r\n            await EditNestedComments(props.username, props.comment_data.post_id, edited_nested_message, props.previous_comment, props.previous_set_comment);\r\n\r\n        }\r\n\r\n    };\r\n\r\n    const show_nested_comments = async () => {\r\n\r\n        await GetNestedComments(props.username, props.comment_data.post_id, set_nested_comments);\r\n\r\n\r\n    };\r\n\r\n    return (\r\n\r\n        <Fragment>\r\n\r\n            <div className=\"comment_section\">\r\n\r\n\r\n                {\r\n\r\n                    props.comment_data.post.post_message\r\n\r\n                }\r\n\r\n                &nbsp;  &nbsp;\r\n\r\n                {props.comment_data.username === props.username ? 'You' : props.comment_data.username}\r\n\r\n                    &nbsp; &#9755; &nbsp;\r\n\r\n                {moment(props.comment_data.post.datetime).calendar({ sameElse: \"DD/MM/YYYY\" })}\r\n\r\n\r\n\r\n                {\r\n\r\n                    props.comment_data.username === props.username\r\n\r\n                        ? <div><button onClick={edit_nested_comments}>Edit</button><button onClick={delete_comment}>Delete</button></div>\r\n\r\n                        : <div><button onClick={reply_to_comment}>Reply</button></div>\r\n\r\n\r\n                }\r\n\r\n                {\r\n\r\n                    Object.keys(nested_comments).length < 1\r\n\r\n                        ?\r\n                        (\r\n                            <div><button onClick={show_nested_comments}>Show Comments &nbsp; &#8595;</button></div>\r\n\r\n                        )\r\n\r\n                        : null\r\n\r\n                }\r\n\r\n                {\r\n\r\n                    Object.keys(nested_comments).length > 0\r\n\r\n                        ? (\r\n\r\n                            Object.keys(nested_comments).map(current_comment => {\r\n\r\n\r\n                                return <Comment\r\n                                    {...props}\r\n                                    previous_comment={nested_comments}\r\n                                    previous_set_comment={set_nested_comments}\r\n                                    key={current_comment}\r\n                                    comment_data={nested_comments[current_comment]}\r\n                                />\r\n\r\n\r\n                            })\r\n\r\n                        )\r\n                        : null\r\n\r\n                }\r\n\r\n            </div>\r\n\r\n        </Fragment>\r\n\r\n\r\n    );\r\n\r\n\r\n};\r\n\r\nexport default Comment;","import React, { Fragment, useState } from 'react';\r\n\r\nimport moment from 'moment';\r\n\r\nimport DeletePost from './DeletePost';\r\n\r\nimport EditPost from './EditPost';\r\n\r\nimport ReplyToPost from './ReplyToPost';\r\n\r\nimport GetComments from './GetComments';\r\n\r\nimport CommentView from './CommentView';\r\n\r\nimport './css/index.css';\r\n\r\nconst Post = (props) => {\r\n\r\n    const [comments, set_comments] = useState({});\r\n\r\n\r\n    const delete_post = async () => {\r\n\r\n        try {\r\n\r\n            await DeletePost(props.username, props.post_data.post_id, props.set_posts);\r\n\r\n        } catch (e) {\r\n\r\n            console.log(e);\r\n\r\n            alert('something gone wrong');\r\n\r\n        }\r\n\r\n\r\n    };\r\n\r\n\r\n    const edit_post = async () => {\r\n\r\n        var edited_message = window.prompt(\"Enter new post message\");\r\n\r\n        if (edited_message) {\r\n\r\n            await EditPost(props.username, props.post_data.post_id, edited_message, props.set_posts);\r\n\r\n        }\r\n\r\n    };\r\n\r\n    const reply_to_post = async () => {\r\n\r\n        var reply_message = window.prompt(\"reply to the post\");\r\n\r\n        if (reply_message) {\r\n\r\n            await ReplyToPost(props.username, props.post_data.post_id, reply_message, props.set_posts);\r\n\r\n        }\r\n\r\n    };\r\n\r\n    const show_comments = async () => {\r\n\r\n        await GetComments(props.username, props.post_data.post_id, set_comments);\r\n\r\n    };\r\n\r\n\r\n    return (\r\n\r\n        <Fragment>\r\n\r\n            <div className=\"post_container\">\r\n\r\n                <div className=\"post_message_container\">\r\n\r\n                    <p className=\"post_message\">{props.post_data.post.post_message}</p>\r\n\r\n                    <p className=\"post_message_info\">\r\n\r\n                        {props.post_data.username === props.username ? 'You' : props.post_data.username}\r\n\r\n                        &nbsp; &#9755; &nbsp;\r\n\r\n                        {moment(props.post_data.post.datetime).calendar({ sameElse: \"DD/MM/YYYY\" })}\r\n\r\n\r\n                    </p>\r\n\r\n                </div>\r\n\r\n                <div className=\"post_options_container\">\r\n\r\n\r\n\r\n                    {\r\n\r\n                        props.post_data.username === props.username\r\n\r\n                            ? <div className=\"post_options\"><button className=\"post_options_button\" onClick={edit_post}>Edit</button><button onClick={delete_post} className=\"post_options_button\">Delete</button></div>\r\n\r\n                            : <div className=\"post_options\"><button className=\"post_options_button\" onClick={reply_to_post}>Reply</button></div>\r\n\r\n\r\n                    }\r\n\r\n\r\n                </div>\r\n\r\n\r\n                <div className=\"post_comments_container\">\r\n\r\n                    {\r\n\r\n                        Object.keys(comments).length < 1\r\n\r\n                            ?\r\n                            (\r\n                                <div className=\"post_comments_container_box\"><button className=\"post_options_button\" onClick={show_comments}>Show Comments &nbsp; &#8595;</button></div>\r\n\r\n                            )\r\n\r\n                            : null\r\n\r\n                    }\r\n\r\n\r\n                    {\r\n\r\n                        Object.keys(comments).length > 0\r\n\r\n                            ? (\r\n\r\n                                Object.keys(comments).map(current_comment => {\r\n\r\n\r\n                                    return (\r\n\r\n                                        <CommentView\r\n                                            previous_comment={comments}\r\n                                            previous_set_comment={set_comments}\r\n                                            {...props}\r\n                                            key={current_comment}\r\n                                            comment_data={comments[current_comment]} />\r\n\r\n                                    )\r\n\r\n                                })\r\n\r\n                            )\r\n                            : null\r\n\r\n                    }\r\n\r\n\r\n\r\n                </div>\r\n\r\n\r\n            </div>\r\n\r\n        </Fragment>\r\n\r\n    );\r\n\r\n\r\n};\r\n\r\n\r\nexport default Post;","const PostMessage = (username, new_post_message, GetPosts, set_posts) => {\r\n\r\n    return new Promise(async (resolve, reject) => {\r\n\r\n\r\n        try {\r\n\r\n\r\n            if (window.fetch) {\r\n\r\n                var response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/save_post`, {\r\n\r\n                    method: \"POST\",\r\n                    headers: {\r\n\r\n                        'Content-Type': 'application/x-www-form-urlencoded',\r\n\r\n                    },\r\n                    body: `username=${username}&&post_message=${new_post_message}`\r\n\r\n                });\r\n\r\n\r\n                var save_post = await response.json();\r\n\r\n                if (save_post.status === 'success') {\r\n\r\n                    await GetPosts(username, set_posts);\r\n\r\n                    resolve();\r\n\r\n                } else {\r\n\r\n                    alert(save_post.message);\r\n\r\n                    console.log(save_post);\r\n\r\n                    resolve();\r\n\r\n                }\r\n\r\n\r\n            }\r\n\r\n\r\n        } catch (e) {\r\n\r\n            reject(e);\r\n\r\n\r\n        }\r\n\r\n\r\n    });\r\n\r\n\r\n};\r\n\r\nexport default PostMessage;","import React, { Fragment, useEffect, useState } from 'react';\r\n\r\nimport GetPosts from './GetPosts';\r\n\r\nimport Post from './Post';\r\n\r\nimport PostMessage from './PostMessage';\r\n\r\nimport './css/index.css';\r\n\r\nconst PostScreen = (props) => {\r\n\r\n    var [posts, set_posts] = useState({});\r\n\r\n    useEffect(() => { //get all user's post\r\n\r\n        (async () => {\r\n\r\n            var result = await GetPosts(props.username, set_posts);\r\n\r\n\r\n        })();\r\n\r\n\r\n    }, []);\r\n\r\n\r\n    const post_message = async () => {\r\n\r\n        var new_post_message = window.prompt('enter new message to post');\r\n\r\n        if (new_post_message) {\r\n\r\n            await PostMessage(props.username, new_post_message, GetPosts, set_posts);\r\n\r\n        }\r\n\r\n    };\r\n\r\n    return (\r\n\r\n        <Fragment>\r\n\r\n            <div id=\"post_screen\">\r\n\r\n                {\r\n\r\n                    Object.keys(posts).reverse().map((current_post) => {\r\n\r\n                        return <Post set_posts={set_posts} username={props.username} post_data={posts[current_post]} key={current_post} />\r\n\r\n\r\n                    })\r\n\r\n\r\n                }\r\n\r\n                <div id=\"post_message_btn_container\">\r\n\r\n                    <button id=\"post_message_btn\" onClick={post_message}>POST</button>\r\n\r\n                </div>\r\n\r\n\r\n            </div>\r\n\r\n\r\n        </Fragment>\r\n\r\n    );\r\n\r\n\r\n};\r\n\r\n\r\nexport default PostScreen;","import React, { Fragment, useState } from 'react';\r\n\r\nimport UsernameInput from './components/UsernameInput';\r\n\r\nimport PostScreen from './components/PostScreen';\r\n\r\nconst Root = () => {\r\n\r\n    var [username, set_username] = useState(\"\");\r\n\r\n    return (\r\n\r\n        <Fragment>\r\n\r\n            <UsernameInput set_username={set_username} />\r\n\r\n            {\r\n\r\n                username !== \"\"\r\n                    ? <PostScreen username={username} />\r\n                    : null\r\n\r\n            }\r\n\r\n\r\n\r\n        </Fragment>\r\n\r\n\r\n    );\r\n\r\n\r\n};\r\n\r\n\r\nexport default Root;","import React, { Fragment } from 'react';\r\n\r\nimport Root from './Routes/Root';\r\n\r\nconst App = () => {\r\n\r\n    return (\r\n\r\n        <Fragment>\r\n\r\n            <Root />\r\n\r\n        </Fragment>\r\n\r\n    );\r\n\r\n};\r\n\r\n\r\n\r\n\r\nexport default App;\r\n\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}